{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-async-promise-executor */\n\n/* eslint-disable import/no-mutable-exports */\nimport { get, isEmpty } from \"lodash\";\nimport * as firebase from \"firebase/app\";\nimport firebaseErrors from \"./firebase/errors\";\nimport { setCookie, getCookie } from \"./session\"; // Firebase services\n\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst isServer = true;\nconst isProd = false;\nconst config = {\n  apiKey: \"AIzaSyBBjKdrfUqYxzv8AuFezBLttmiUj6evhz0\",\n  authDomain: \"testing-2b05e.firebaseapp.com\",\n  databaseURL: \"https://testing-2b05e.firebaseio.com\",\n  projectId: \"testing-2b05e\",\n  storageBucket: \"testing-2b05e.appspot.com\",\n  messagingSenderId: \"671346717916\",\n  appId: \"1:671346717916:web:273e09a3717613e7c3b019\"\n};\nlet auth = null;\nlet firestore = null;\nlet analytics = null;\n\nclass Firebase {\n  constructor() {\n    _defineProperty(this, \"isAuthUser\", () => {\n      return this.auth.currentUser !== null;\n    });\n\n    _defineProperty(this, \"authUser\", () => this.auth.currentUser);\n\n    _defineProperty(this, \"getRef\", ({\n      collection,\n      doc\n    }) => this.db.collection(collection).doc(doc));\n\n    _defineProperty(this, \"authRef\", () => {\n      const authUser = this.authUser();\n\n      if (!authUser) {\n        return null;\n      }\n\n      return this.getRef({\n        collection: \"users\",\n        doc: authUser.uid\n      });\n    });\n\n    _defineProperty(this, \"query\", ({\n      collection,\n      orderBy = null,\n      startAt = null,\n      limit = 20,\n      where\n    } = {}) => {\n      let ref = this.db.collection(collection);\n      if (startAt !== null) ref = ref.startAt(startAt);\n      if (limit !== null) ref = ref.limit(limit);\n\n      if (orderBy !== null) {\n        const {\n          field,\n          op\n        } = orderBy;\n        ref = ref.orderBy(field, op);\n      }\n\n      if (where !== null) {\n        const {\n          field,\n          op,\n          value\n        } = where;\n        ref = ref.where(field, op, value);\n      }\n\n      return ref;\n    });\n\n    _defineProperty(this, \"getQuerySnapshotData\", async (querySnapshot, addUid = false) => {\n      const res = [];\n      querySnapshot.forEach(doc => {\n        if (doc.exists) {\n          if (addUid) {\n            res.push(_objectSpread(_objectSpread({}, doc.data()), {}, {\n              id: doc.id\n            }));\n          } else {\n            res.push(_objectSpread({}, doc.data()));\n          }\n        }\n      });\n      console.log('snap', res);\n      return res;\n    });\n\n    _defineProperty(this, \"GetSnapShot\", async collection => {\n      return new Promise(async resolve => {\n        firebase.firestore().collection(collection).onSnapshot(snapshot => {\n          const data = snapshot.docs.map(doc => _objectSpread({\n            id: doc.id\n          }, doc.data()));\n          console.log('snap', data);\n          resolve(data);\n        });\n      });\n    });\n\n    _defineProperty(this, \"getCollectionData\", ({\n      collection,\n      orderBy = null,\n      startAt = null,\n      addUid = true,\n      limit = null,\n      where = null,\n      cache = false\n    } = {}) => {\n      if (isEmpty(collection)) return [];\n\n      if (cache && !isEmpty(getCookie(collection))) {\n        return getCookie(collection);\n      }\n\n      return new Promise(async (resolve, reject) => {\n        const docRef = this.query({\n          collection,\n          orderBy,\n          startAt,\n          limit,\n          where\n        });\n\n        try {\n          const querySnapshot = await docRef.get();\n          const res = await this.getQuerySnapshotData(querySnapshot, addUid);\n          if (cache) setCookie(collection, res);\n          resolve(res);\n        } catch (error) {\n          reject(error);\n        }\n      });\n    });\n\n    _defineProperty(this, \"saveData\", ({\n      collection = null,\n      data = {},\n      id = null\n    }) => {\n      return new Promise(async (resolve, reject) => {\n        if (!collection) reject(new Error(\"Set collection name\"));\n\n        try {\n          const dbRef = this.db.collection(collection);\n          let docRef;\n\n          if (id) {\n            dbRef.doc(id);\n            await dbRef.doc(id).set(data);\n            docRef = this.getRef({\n              collection,\n              doc: id\n            });\n          } else {\n            docRef = await dbRef.add(data);\n          }\n\n          const doc = await docRef.get();\n          const {\n            id: docId\n          } = doc;\n          const docData = doc.data();\n          resolve(_objectSpread({\n            id: docId,\n            ref: docRef\n          }, docData));\n        } catch (error) {\n          reject(error);\n        }\n      });\n    });\n\n    _defineProperty(this, \"deleteDocument\", ({\n      collection = null,\n      id = null\n    }) => {\n      return new Promise(async (resolve, reject) => {\n        if (!collection) reject(new Error(\"Set collection name\"));\n        if (!id) reject(new Error(\"Set document id\"));\n\n        try {\n          const dbRef = this.db.collection(collection).doc(id);\n          await dbRef.delete();\n          resolve(true);\n        } catch (error) {\n          reject(error);\n        }\n      });\n    });\n\n    _defineProperty(this, \"sanitizeUser\", user => {\n      return {\n        uid: get(user, \"uid\"),\n        email: get(user, \"email\") || null,\n        displayName: get(user, \"displayName\") || null,\n        photoURL: get(user, \"photoURL\") || null,\n        emailVerified: get(user, \"emailVerified\") || null,\n        phoneNumber: get(user, \"phoneNumber\") || null,\n        team: get(user, \"team\") || null\n      };\n    });\n\n    _defineProperty(this, \"getDocumentData\", async ({\n      collection,\n      documentId\n    } = {}) => {\n      if (!documentId) throw new Error(\"documentId is mandatory\");\n      const docRef = this.db.collection(collection).doc(documentId);\n      const doc = await docRef.get();\n      const {\n        id\n      } = doc;\n      const data = doc.data();\n      return _objectSpread({\n        id,\n        ref: docRef\n      }, data);\n    });\n\n    _defineProperty(this, \"getUser\", async user => {\n      const doc = await this.db.collection(\"users\").doc(user.uid).get();\n      return doc.data();\n    });\n\n    _defineProperty(this, \"fillUserData\", async user => {\n      const doc = await this.db.collection(\"users\").doc(user.uid).get();\n      const data = doc.data();\n\n      if (doc.exists) {\n        return _objectSpread(_objectSpread({}, user), data);\n      }\n\n      return user;\n    });\n\n    _defineProperty(this, \"doAuthWithGoogle\", () => {\n      const provider = new firebase.auth.GoogleAuthProvider();\n      return new Promise((resolve, reject) => {\n        firebase.auth().signInWithPopup(provider).then(async resp => {\n          if (resp) {\n            let {\n              user\n            } = resp;\n            const {\n              additionalUserInfo\n            } = resp;\n\n            if (additionalUserInfo.isNewUser) {\n              const sanitizeUser = this.sanitizeUser(user);\n\n              const userToSave = _objectSpread(_objectSpread({}, sanitizeUser), {}, {\n                createdAt: new Date()\n              });\n\n              await this.saveData({\n                collection: \"users\",\n                data: userToSave,\n                id: user.uid\n              });\n              console.log(\"user saved in users collection\");\n            }\n\n            const {\n              idToken\n            } = resp.credential;\n            console.log({\n              idToken\n            });\n            user = await this.fillUserData(this.sanitizeUser(user));\n            console.log({\n              user\n            });\n            resolve({\n              user,\n              idToken\n            });\n          }\n\n          reject(new Error(\"Sorry, something went wrong. Please try later\"));\n        }).catch(error => {\n          const {\n            code\n          } = error;\n          let message = \"Sorry, something went wrong. Please try later\";\n\n          if (code) {\n            message = get(firebaseErrors, code);\n          }\n\n          reject(new Error(message));\n        });\n      });\n    });\n\n    _defineProperty(this, \"doAuthWithGithub\", () => {\n      const provider = new firebase.auth.GithubAuthProvider();\n      provider.addScope(\"read:user\");\n      return new Promise((resolve, reject) => {\n        firebase.auth().signInWithPopup(provider).then(async resp => {\n          if (resp) {\n            let {\n              user\n            } = resp;\n\n            if (!user.emailVerified) {\n              await user.sendEmailVerification();\n            }\n\n            const {\n              idToken\n            } = resp.credential;\n            const {\n              additionalUserInfo\n            } = resp;\n\n            if (additionalUserInfo.isNewUser) {\n              const sanitizeUser = this.sanitizeUser(user);\n\n              const userToSave = _objectSpread(_objectSpread({}, sanitizeUser), {}, {\n                createdAt: new Date()\n              });\n\n              await this.saveData({\n                collection: \"users\",\n                data: userToSave,\n                id: user.uid\n              });\n            }\n\n            user = await this.fillUserData(this.sanitizeUser(user));\n            resolve({\n              user,\n              idToken\n            });\n          } else {\n            reject(new Error(\"Sorry, something went wrong. Please try later\"));\n          }\n        }).catch(error => {\n          const {\n            code\n          } = error;\n          let message = \"Sorry, something went wrong. Please try later\";\n\n          if (code) {\n            message = get(firebaseErrors, code);\n          }\n\n          reject(new Error(message));\n        });\n      });\n    });\n\n    _defineProperty(this, \"doSignOut\", () => {\n      this.auth.signOut();\n    });\n\n    if (!firebase.apps.length) {\n      firebase.initializeApp(config);\n    }\n\n    if (!isServer && isProd) {\n      this.analytics = firebase.analytics();\n      this.analytics.logEvent(\"alive\");\n    }\n\n    this.auth = firebase.auth();\n    this.db = firebase.firestore();\n    auth = this.auth;\n    firestore = this.db;\n  }\n  /**\r\n   * Return if user is auth\r\n   */\n\n\n}\n\nexport { Firebase, auth, firestore };","map":{"version":3,"sources":["C:/Users/yosho/Documents/Next-Restaurant/delivery-rest/lib/firebase.js"],"names":["get","isEmpty","firebase","firebaseErrors","setCookie","getCookie","isServer","isProd","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","firestore","analytics","Firebase","constructor","currentUser","collection","doc","db","authUser","getRef","uid","orderBy","startAt","limit","where","ref","field","op","value","querySnapshot","addUid","res","forEach","exists","push","data","id","console","log","Promise","resolve","onSnapshot","snapshot","docs","map","cache","reject","docRef","query","getQuerySnapshotData","error","Error","dbRef","set","add","docId","docData","delete","user","email","displayName","photoURL","emailVerified","phoneNumber","team","documentId","provider","GoogleAuthProvider","signInWithPopup","then","resp","additionalUserInfo","isNewUser","sanitizeUser","userToSave","createdAt","Date","saveData","idToken","credential","fillUserData","catch","code","message","GithubAuthProvider","addScope","sendEmailVerification","signOut","apps","length","initializeApp","logEvent"],"mappings":"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","sourcesContent":["/* eslint-disable no-async-promise-executor */\r\n/* eslint-disable import/no-mutable-exports */\r\nimport { get, isEmpty } from \"lodash\";\r\nimport * as firebase from \"firebase/app\";\r\nimport firebaseErrors from \"./firebase/errors\";\r\nimport { setCookie, getCookie } from \"./session\";\r\n// Firebase services\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\n\r\n\r\nconst isServer = typeof window === \"undefined\";\r\nconst isProd = process.env.NODE_ENV === \"production\";\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyBBjKdrfUqYxzv8AuFezBLttmiUj6evhz0\",\r\n  authDomain: \"testing-2b05e.firebaseapp.com\",\r\n  databaseURL: \"https://testing-2b05e.firebaseio.com\",\r\n  projectId: \"testing-2b05e\",\r\n  storageBucket: \"testing-2b05e.appspot.com\",\r\n  messagingSenderId: \"671346717916\",\r\n  appId: \"1:671346717916:web:273e09a3717613e7c3b019\",\r\n};\r\n\r\nlet auth = null;\r\nlet firestore = null;\r\nlet analytics = null;\r\n\r\nclass Firebase {\r\n  constructor() {\r\n    if (!firebase.apps.length) {\r\n      firebase.initializeApp(config);\r\n    }\r\n    if (!isServer && isProd) {\r\n      this.analytics = firebase.analytics();\r\n      this.analytics.logEvent(\"alive\");\r\n    }\r\n    this.auth = firebase.auth();\r\n    this.db = firebase.firestore();\r\n    auth = this.auth;\r\n    firestore = this.db;\r\n  \r\n  }\r\n\r\n  /**\r\n   * Return if user is auth\r\n   */\r\n  isAuthUser = () => {\r\n    return this.auth.currentUser !== null;\r\n  };\r\n\r\n  /**\r\n   * Return auth user\r\n   */\r\n  authUser = () => this.auth.currentUser;\r\n\r\n  /**\r\n   * Return ref for any collection\r\n   */\r\n  getRef = ({ collection, doc }) => this.db.collection(collection).doc(doc);\r\n\r\n  /**\r\n   * Return auth user ref\r\n   */\r\n  authRef = () => {\r\n    const authUser = this.authUser();\r\n    if (!authUser) {\r\n      return null;\r\n    }\r\n    return this.getRef({ collection: \"users\", doc: authUser.uid });\r\n  };\r\n\r\n  /**\r\n   * Universal Query to firebase collections\r\n   * @param collection [collection name]\r\n   * @param orderBy? [orderBy clausure, object { field, op }]\r\n   * @param startAt? [startAt] pagination startAt\r\n   * @param limit [limit of collection data]\r\n   * @param where [where clausure, object { field, op, value }]\r\n   */\r\n  query = ({\r\n    collection,\r\n    orderBy = null,\r\n    startAt = null,\r\n    limit = 20,\r\n    where,\r\n  } = {}) => {\r\n    let ref = this.db.collection(collection);\r\n    if (startAt !== null) ref = ref.startAt(startAt);\r\n    if (limit !== null) ref = ref.limit(limit);\r\n    if (orderBy !== null) {\r\n      const { field, op } = orderBy;\r\n      ref = ref.orderBy(field, op);\r\n    }\r\n    if (where !== null) {\r\n      const { field, op, value } = where;\r\n      ref = ref.where(field, op, value);\r\n    }\r\n    return ref;\r\n  };\r\n\r\n  /**\r\n   * Return snapshot data\r\n   * @param querySnapshot [Query Firebase snapshot data]\r\n   */\r\n  getQuerySnapshotData = async (querySnapshot, addUid = false) => {\r\n    const res = [];\r\n    querySnapshot.forEach((doc) => {\r\n      if (doc.exists) {\r\n        if (addUid) {\r\n          res.push({ ...doc.data(), id: doc.id });\r\n        } else {\r\n          res.push({ ...doc.data() });\r\n        }\r\n      }\r\n    }); console.log('snap',res);\r\n    return res;\r\n  };\r\n\r\n\r\n\r\n\r\n  GetSnapShot = async (collection) => {\r\n    return new Promise(async (resolve) => {\r\n      firebase\r\n        .firestore()\r\n        .collection(collection)\r\n        .onSnapshot((snapshot) => {\r\n          const data = snapshot.docs.map((doc) => ({\r\n            id: doc.id,\r\n            ...doc.data(),\r\n          }));\r\n          console.log('snap',data);\r\n          resolve(data);\r\n        });\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Universal collection data\r\n   * @param collection [collection name]\r\n   * @param orderBy? [orderBy colection]\r\n   * @param orderByOp? [orderBy Op ex. 'desc', 'asc']\r\n   * @param startAt? [startAt] pagination startAt\r\n   * @param limit [limit of collection data]\r\n   * @param where [where clausure, object { field, op, value }]\r\n   */\r\n  getCollectionData = ({\r\n    collection,\r\n    orderBy = null,\r\n    startAt = null,\r\n    addUid = true,\r\n    limit = null,\r\n    where = null,\r\n    cache = false,\r\n  } = {}) => {\r\n    if (isEmpty(collection)) return [];\r\n    if (cache && !isEmpty(getCookie(collection))) {\r\n      return getCookie(collection);\r\n    }\r\n    return new Promise(async (resolve, reject) => {\r\n      const docRef = this.query({ collection, orderBy, startAt, limit, where });\r\n      try {\r\n        const querySnapshot = await docRef.get();\r\n        const res = await this.getQuerySnapshotData(querySnapshot, addUid);\r\n        if (cache) setCookie(collection, res);\r\n        resolve(res);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Generic: Save data into collection especified\r\n   * @param string collection\r\n   * @param object data\r\n   * @param string id\r\n   * @param bool merge\r\n   * @return Promise\r\n   */\r\n  saveData = ({ collection = null, data = {}, id = null }) => {\r\n    return new Promise(async (resolve, reject) => {\r\n      if (!collection) reject(new Error(\"Set collection name\"));\r\n      try {\r\n        const dbRef = this.db.collection(collection);\r\n        let docRef;\r\n        if (id) {\r\n          dbRef.doc(id);\r\n          await dbRef.doc(id).set(data);\r\n          docRef = this.getRef({ collection, doc: id });\r\n        } else {\r\n          docRef = await dbRef.add(data);\r\n        }\r\n        const doc = await docRef.get();\r\n        const { id: docId } = doc;\r\n        const docData = doc.data();\r\n        resolve({ id: docId, ref: docRef, ...docData });\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Generic: Delete document into collection especified\r\n   * @param string collection\r\n   * @param string id\r\n   * @return Promise\r\n   */\r\n  deleteDocument = ({ collection = null, id = null }) => {\r\n    return new Promise(async (resolve, reject) => {\r\n      if (!collection) reject(new Error(\"Set collection name\"));\r\n      if (!id) reject(new Error(\"Set document id\"));\r\n\r\n      try {\r\n        const dbRef = this.db.collection(collection).doc(id);\r\n        await dbRef.delete();\r\n        resolve(true);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  };\r\n\r\n  sanitizeUser = (user) => {\r\n    return {\r\n      uid: get(user, \"uid\"),\r\n      email: get(user, \"email\") || null,\r\n      displayName: get(user, \"displayName\") || null,\r\n      photoURL: get(user, \"photoURL\") || null,\r\n      emailVerified: get(user, \"emailVerified\") || null,\r\n      phoneNumber: get(user, \"phoneNumber\") || null,\r\n      team: get(user, \"team\") || null,\r\n    };\r\n  };\r\n\r\n  getDocumentData = async ({ collection, documentId } = {}) => {\r\n    if (!documentId) throw new Error(\"documentId is mandatory\");\r\n    const docRef = this.db.collection(collection).doc(documentId);\r\n    const doc = await docRef.get();\r\n    const { id } = doc;\r\n    const data = doc.data();\r\n    return { id, ref: docRef, ...data };\r\n  };\r\n\r\n  getUser = async (user) => {\r\n    const doc = await this.db.collection(\"users\").doc(user.uid).get();\r\n    return doc.data();\r\n  };\r\n\r\n  fillUserData = async (user) => {\r\n    const doc = await this.db.collection(\"users\").doc(user.uid).get();\r\n    const data = doc.data();\r\n    if (doc.exists) {\r\n      return { ...user, ...data };\r\n    }\r\n    return user;\r\n  };\r\n\r\n  // ** Auth with google **\r\n  doAuthWithGoogle = () => {\r\n    const provider = new firebase.auth.GoogleAuthProvider();\r\n    return new Promise((resolve, reject) => {\r\n      firebase\r\n        .auth()\r\n        .signInWithPopup(provider)\r\n        .then(async (resp) => {\r\n          if (resp) {\r\n            let { user } = resp;\r\n            const { additionalUserInfo } = resp;\r\n            if (additionalUserInfo.isNewUser) {\r\n              const sanitizeUser = this.sanitizeUser(user);\r\n              const userToSave = {\r\n                ...sanitizeUser,\r\n                createdAt: new Date(),\r\n              };\r\n              await this.saveData({\r\n                collection: \"users\",\r\n                data: userToSave,\r\n                id: user.uid,\r\n              });\r\n              console.log(\"user saved in users collection\");\r\n            }\r\n            const { idToken } = resp.credential;\r\n            console.log({ idToken });\r\n            user = await this.fillUserData(this.sanitizeUser(user));\r\n            console.log({ user });\r\n            resolve({ user, idToken });\r\n          }\r\n          reject(new Error(\"Sorry, something went wrong. Please try later\"));\r\n        })\r\n        .catch((error) => {\r\n          const { code } = error;\r\n          let message = \"Sorry, something went wrong. Please try later\";\r\n          if (code) {\r\n            message = get(firebaseErrors, code);\r\n          }\r\n          reject(new Error(message));\r\n        });\r\n    });\r\n  };\r\n\r\n  // ** Auth with github **\r\n  doAuthWithGithub = () => {\r\n    const provider = new firebase.auth.GithubAuthProvider();\r\n    provider.addScope(\"read:user\");\r\n    return new Promise((resolve, reject) => {\r\n      firebase\r\n        .auth()\r\n        .signInWithPopup(provider)\r\n        .then(async (resp) => {\r\n          if (resp) {\r\n            let { user } = resp;\r\n            if (!user.emailVerified) {\r\n              await user.sendEmailVerification();\r\n            }\r\n            const { idToken } = resp.credential;\r\n            const { additionalUserInfo } = resp;\r\n            if (additionalUserInfo.isNewUser) {\r\n              const sanitizeUser = this.sanitizeUser(user);\r\n              const userToSave = {\r\n                ...sanitizeUser,\r\n                createdAt: new Date(),\r\n              };\r\n              await this.saveData({\r\n                collection: \"users\",\r\n                data: userToSave,\r\n                id: user.uid,\r\n              });\r\n            }\r\n            user = await this.fillUserData(this.sanitizeUser(user));\r\n            resolve({ user, idToken });\r\n          } else {\r\n            reject(new Error(\"Sorry, something went wrong. Please try later\"));\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          const { code } = error;\r\n          let message = \"Sorry, something went wrong. Please try later\";\r\n          if (code) {\r\n            message = get(firebaseErrors, code);\r\n          }\r\n          reject(new Error(message));\r\n        });\r\n    });\r\n  };\r\n\r\n  doSignOut = () => {\r\n    this.auth.signOut();\r\n  };\r\n\r\n  \r\n}\r\n\r\nexport { Firebase, auth, firestore };\r\n"]},"metadata":{},"sourceType":"module"}