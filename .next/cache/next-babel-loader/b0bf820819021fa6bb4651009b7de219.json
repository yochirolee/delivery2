{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Firebase services\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst isServer = true;\nconst isProd = false;\nconst config = {\n  apiKey: \"AIzaSyBBjKdrfUqYxzv8AuFezBLttmiUj6evhz0\",\n  authDomain: \"testing-2b05e.firebaseapp.com\",\n  databaseURL: \"https://testing-2b05e.firebaseio.com\",\n  projectId: \"testing-2b05e\",\n  storageBucket: \"testing-2b05e.appspot.com\",\n  messagingSenderId: \"671346717916\",\n  appId: \"1:671346717916:web:273e09a3717613e7c3b019\"\n};\nlet auth = null;\nlet firestore = null;\nlet analytics = null;\n\nclass Firebase {\n  constructor() {\n    _defineProperty(this, \"getCollectionData\", ({\n      collection,\n      orderBy = null,\n      startAt = null,\n      addUid = true,\n      limit = null,\n      where = null,\n      cache = false\n    } = {}) => {\n      if (isEmpty(collection)) return [];\n\n      if (cache && !isEmpty(getCookie(collection))) {\n        return getCookie(collection);\n      }\n\n      return new Promise(async (resolve, reject) => {\n        const docRef = this.query({\n          collection,\n          orderBy,\n          startAt,\n          limit,\n          where\n        });\n\n        try {\n          const querySnapshot = await docRef.get();\n          const res = await this.getQuerySnapshotData(querySnapshot, addUid);\n          if (cache) setCookie(collection, res);\n          resolve(res);\n        } catch (error) {\n          reject(error);\n        }\n      });\n    });\n\n    _defineProperty(this, \"saveData\", ({\n      collection = null,\n      data = {},\n      id = null\n    }) => {\n      return new Promise(async (resolve, reject) => {\n        if (!collection) reject(new Error(\"Set collection name\"));\n\n        try {\n          const dbRef = this.db.collection(collection);\n          let docRef;\n\n          if (id) {\n            dbRef.doc(id);\n            await dbRef.doc(id).set(data);\n            docRef = this.getRef({\n              collection,\n              doc: id\n            });\n          } else {\n            docRef = await dbRef.add(data);\n          }\n\n          const doc = await docRef.get();\n          const {\n            id: docId\n          } = doc;\n          const docData = doc.data();\n          resolve(_objectSpread({\n            id: docId,\n            ref: docRef\n          }, docData));\n        } catch (error) {\n          reject(error);\n        }\n      });\n    });\n\n    _defineProperty(this, \"deleteDocument\", ({\n      collection = null,\n      id = null\n    }) => {\n      return new Promise(async (resolve, reject) => {\n        if (!collection) reject(new Error(\"Set collection name\"));\n        if (!id) reject(new Error(\"Set document id\"));\n\n        try {\n          const dbRef = this.db.collection(collection).doc(id);\n          await dbRef.delete();\n          resolve(true);\n        } catch (error) {\n          reject(error);\n        }\n      });\n    });\n\n    _defineProperty(this, \"sanitizeUser\", user => {\n      return {\n        uid: get(user, \"uid\"),\n        email: get(user, \"email\") || null,\n        displayName: get(user, \"displayName\") || null,\n        photoURL: get(user, \"photoURL\") || null,\n        emailVerified: get(user, \"emailVerified\") || null,\n        phoneNumber: get(user, \"phoneNumber\") || null,\n        team: get(user, \"team\") || null\n      };\n    });\n\n    _defineProperty(this, \"getDocumentData\", async ({\n      collection,\n      documentId\n    } = {}) => {\n      if (!documentId) throw new Error(\"documentId is mandatory\");\n      const docRef = this.db.collection(collection).doc(documentId);\n      const doc = await docRef.get();\n      const {\n        id\n      } = doc;\n      const data = doc.data();\n      return _objectSpread({\n        id,\n        ref: docRef\n      }, data);\n    });\n\n    _defineProperty(this, \"getUser\", async user => {\n      const doc = await this.db.collection(\"users\").doc(user.uid).get();\n      return doc.data();\n    });\n\n    _defineProperty(this, \"fillUserData\", async user => {\n      const doc = await this.db.collection(\"users\").doc(user.uid).get();\n      const data = doc.data();\n\n      if (doc.exists) {\n        return _objectSpread(_objectSpread({}, user), data);\n      }\n\n      return user;\n    });\n\n    _defineProperty(this, \"doAuthWithGoogle\", () => {\n      const provider = new firebase.auth.GoogleAuthProvider();\n      return new Promise((resolve, reject) => {\n        firebase.auth().signInWithPopup(provider).then(async resp => {\n          if (resp) {\n            let {\n              user\n            } = resp;\n            const {\n              additionalUserInfo\n            } = resp;\n\n            if (additionalUserInfo.isNewUser) {\n              const sanitizeUser = this.sanitizeUser(user);\n\n              const userToSave = _objectSpread(_objectSpread({}, sanitizeUser), {}, {\n                createdAt: new Date()\n              });\n\n              await this.saveData({\n                collection: \"users\",\n                data: userToSave,\n                id: user.uid\n              });\n              console.log(\"user saved in users collection\");\n            }\n\n            const {\n              idToken\n            } = resp.credential;\n            console.log({\n              idToken\n            });\n            user = await this.fillUserData(this.sanitizeUser(user));\n            console.log({\n              user\n            });\n            resolve({\n              user,\n              idToken\n            });\n          }\n\n          reject(new Error(\"Sorry, something went wrong. Please try later\"));\n        }).catch(error => {\n          const {\n            code\n          } = error;\n          let message = \"Sorry, something went wrong. Please try later\";\n\n          if (code) {\n            message = get(firebaseErrors, code);\n          }\n\n          reject(new Error(message));\n        });\n      });\n    });\n\n    _defineProperty(this, \"doAuthWithGithub\", () => {\n      const provider = new firebase.auth.GithubAuthProvider();\n      provider.addScope(\"read:user\");\n      return new Promise((resolve, reject) => {\n        firebase.auth().signInWithPopup(provider).then(async resp => {\n          if (resp) {\n            let {\n              user\n            } = resp;\n\n            if (!user.emailVerified) {\n              await user.sendEmailVerification();\n            }\n\n            const {\n              idToken\n            } = resp.credential;\n            const {\n              additionalUserInfo\n            } = resp;\n\n            if (additionalUserInfo.isNewUser) {\n              const sanitizeUser = this.sanitizeUser(user);\n\n              const userToSave = _objectSpread(_objectSpread({}, sanitizeUser), {}, {\n                createdAt: new Date()\n              });\n\n              await this.saveData({\n                collection: \"users\",\n                data: userToSave,\n                id: user.uid\n              });\n            }\n\n            user = await this.fillUserData(this.sanitizeUser(user));\n            resolve({\n              user,\n              idToken\n            });\n          } else {\n            reject(new Error(\"Sorry, something went wrong. Please try later\"));\n          }\n        }).catch(error => {\n          const {\n            code\n          } = error;\n          let message = \"Sorry, something went wrong. Please try later\";\n\n          if (code) {\n            message = get(firebaseErrors, code);\n          }\n\n          reject(new Error(message));\n        });\n      });\n    });\n\n    _defineProperty(this, \"doSignOut\", () => {\n      this.auth.signOut();\n    });\n\n    if (!firebase.apps.length) {\n      firebase.initializeApp(config);\n    }\n\n    if (!isServer && isProd) {\n      this.analytics = firebase.analytics();\n      this.analytics.logEvent(\"alive\");\n    }\n\n    this.auth = firebase.auth();\n    this.db = firebase.firestore();\n    auth = this.auth;\n    firestore = this.db;\n  }\n  /**\r\n   * Universal collection data\r\n   * @param collection [collection name]\r\n   * @param orderBy? [orderBy colection]\r\n   * @param orderByOp? [orderBy Op ex. 'desc', 'asc']\r\n   * @param startAt? [startAt] pagination startAt\r\n   * @param limit [limit of collection data]\r\n   * @param where [where clausure, object { field, op, value }]\r\n   */\n\n\n}\n\nexport { Firebase, auth, firestore };","map":{"version":3,"sources":["C:/Users/yosho/Documents/Next-Restaurant/delivery-rest/lib/firebase.js"],"names":["isServer","isProd","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","firestore","analytics","Firebase","constructor","collection","orderBy","startAt","addUid","limit","where","cache","isEmpty","getCookie","Promise","resolve","reject","docRef","query","querySnapshot","get","res","getQuerySnapshotData","setCookie","error","data","id","Error","dbRef","db","doc","set","getRef","add","docId","docData","ref","delete","user","uid","email","displayName","photoURL","emailVerified","phoneNumber","team","documentId","exists","provider","firebase","GoogleAuthProvider","signInWithPopup","then","resp","additionalUserInfo","isNewUser","sanitizeUser","userToSave","createdAt","Date","saveData","console","log","idToken","credential","fillUserData","catch","code","message","firebaseErrors","GithubAuthProvider","addScope","sendEmailVerification","signOut","apps","length","initializeApp","logEvent"],"mappings":"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","sourcesContent":["\r\n// Firebase services\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\n\r\n\r\nconst isServer = typeof window === \"undefined\";\r\nconst isProd = process.env.NODE_ENV === \"production\";\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyBBjKdrfUqYxzv8AuFezBLttmiUj6evhz0\",\r\n  authDomain: \"testing-2b05e.firebaseapp.com\",\r\n  databaseURL: \"https://testing-2b05e.firebaseio.com\",\r\n  projectId: \"testing-2b05e\",\r\n  storageBucket: \"testing-2b05e.appspot.com\",\r\n  messagingSenderId: \"671346717916\",\r\n  appId: \"1:671346717916:web:273e09a3717613e7c3b019\",\r\n};\r\n\r\nlet auth = null;\r\nlet firestore = null;\r\nlet analytics = null;\r\n\r\nclass Firebase {\r\n  constructor() {\r\n    if (!firebase.apps.length) {\r\n      firebase.initializeApp(config);\r\n    }\r\n    if (!isServer && isProd) {\r\n      this.analytics = firebase.analytics();\r\n      this.analytics.logEvent(\"alive\");\r\n    }\r\n    this.auth = firebase.auth();\r\n    this.db = firebase.firestore();\r\n    auth = this.auth;\r\n    firestore = this.db;\r\n  \r\n  }\r\n\r\n \r\n\r\n  /**\r\n   * Universal collection data\r\n   * @param collection [collection name]\r\n   * @param orderBy? [orderBy colection]\r\n   * @param orderByOp? [orderBy Op ex. 'desc', 'asc']\r\n   * @param startAt? [startAt] pagination startAt\r\n   * @param limit [limit of collection data]\r\n   * @param where [where clausure, object { field, op, value }]\r\n   */\r\n  getCollectionData = ({\r\n    collection,\r\n    orderBy = null,\r\n    startAt = null,\r\n    addUid = true,\r\n    limit = null,\r\n    where = null,\r\n    cache = false,\r\n  } = {}) => {\r\n    if (isEmpty(collection)) return [];\r\n    if (cache && !isEmpty(getCookie(collection))) {\r\n      return getCookie(collection);\r\n    }\r\n    return new Promise(async (resolve, reject) => {\r\n      const docRef = this.query({ collection, orderBy, startAt, limit, where });\r\n      try {\r\n        const querySnapshot = await docRef.get();\r\n        const res = await this.getQuerySnapshotData(querySnapshot, addUid);\r\n        if (cache) setCookie(collection, res);\r\n        resolve(res);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Generic: Save data into collection especified\r\n   * @param string collection\r\n   * @param object data\r\n   * @param string id\r\n   * @param bool merge\r\n   * @return Promise\r\n   */\r\n  saveData = ({ collection = null, data = {}, id = null }) => {\r\n    return new Promise(async (resolve, reject) => {\r\n      if (!collection) reject(new Error(\"Set collection name\"));\r\n      try {\r\n        const dbRef = this.db.collection(collection);\r\n        let docRef;\r\n        if (id) {\r\n          dbRef.doc(id);\r\n          await dbRef.doc(id).set(data);\r\n          docRef = this.getRef({ collection, doc: id });\r\n        } else {\r\n          docRef = await dbRef.add(data);\r\n        }\r\n        const doc = await docRef.get();\r\n        const { id: docId } = doc;\r\n        const docData = doc.data();\r\n        resolve({ id: docId, ref: docRef, ...docData });\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Generic: Delete document into collection especified\r\n   * @param string collection\r\n   * @param string id\r\n   * @return Promise\r\n   */\r\n  deleteDocument = ({ collection = null, id = null }) => {\r\n    return new Promise(async (resolve, reject) => {\r\n      if (!collection) reject(new Error(\"Set collection name\"));\r\n      if (!id) reject(new Error(\"Set document id\"));\r\n\r\n      try {\r\n        const dbRef = this.db.collection(collection).doc(id);\r\n        await dbRef.delete();\r\n        resolve(true);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  };\r\n\r\n  sanitizeUser = (user) => {\r\n    return {\r\n      uid: get(user, \"uid\"),\r\n      email: get(user, \"email\") || null,\r\n      displayName: get(user, \"displayName\") || null,\r\n      photoURL: get(user, \"photoURL\") || null,\r\n      emailVerified: get(user, \"emailVerified\") || null,\r\n      phoneNumber: get(user, \"phoneNumber\") || null,\r\n      team: get(user, \"team\") || null,\r\n    };\r\n  };\r\n\r\n  getDocumentData = async ({ collection, documentId } = {}) => {\r\n    if (!documentId) throw new Error(\"documentId is mandatory\");\r\n    const docRef = this.db.collection(collection).doc(documentId);\r\n    const doc = await docRef.get();\r\n    const { id } = doc;\r\n    const data = doc.data();\r\n    return { id, ref: docRef, ...data };\r\n  };\r\n\r\n  getUser = async (user) => {\r\n    const doc = await this.db.collection(\"users\").doc(user.uid).get();\r\n    return doc.data();\r\n  };\r\n\r\n  fillUserData = async (user) => {\r\n    const doc = await this.db.collection(\"users\").doc(user.uid).get();\r\n    const data = doc.data();\r\n    if (doc.exists) {\r\n      return { ...user, ...data };\r\n    }\r\n    return user;\r\n  };\r\n\r\n  // ** Auth with google **\r\n  doAuthWithGoogle = () => {\r\n    const provider = new firebase.auth.GoogleAuthProvider();\r\n    return new Promise((resolve, reject) => {\r\n      firebase\r\n        .auth()\r\n        .signInWithPopup(provider)\r\n        .then(async (resp) => {\r\n          if (resp) {\r\n            let { user } = resp;\r\n            const { additionalUserInfo } = resp;\r\n            if (additionalUserInfo.isNewUser) {\r\n              const sanitizeUser = this.sanitizeUser(user);\r\n              const userToSave = {\r\n                ...sanitizeUser,\r\n                createdAt: new Date(),\r\n              };\r\n              await this.saveData({\r\n                collection: \"users\",\r\n                data: userToSave,\r\n                id: user.uid,\r\n              });\r\n              console.log(\"user saved in users collection\");\r\n            }\r\n            const { idToken } = resp.credential;\r\n            console.log({ idToken });\r\n            user = await this.fillUserData(this.sanitizeUser(user));\r\n            console.log({ user });\r\n            resolve({ user, idToken });\r\n          }\r\n          reject(new Error(\"Sorry, something went wrong. Please try later\"));\r\n        })\r\n        .catch((error) => {\r\n          const { code } = error;\r\n          let message = \"Sorry, something went wrong. Please try later\";\r\n          if (code) {\r\n            message = get(firebaseErrors, code);\r\n          }\r\n          reject(new Error(message));\r\n        });\r\n    });\r\n  };\r\n\r\n  // ** Auth with github **\r\n  doAuthWithGithub = () => {\r\n    const provider = new firebase.auth.GithubAuthProvider();\r\n    provider.addScope(\"read:user\");\r\n    return new Promise((resolve, reject) => {\r\n      firebase\r\n        .auth()\r\n        .signInWithPopup(provider)\r\n        .then(async (resp) => {\r\n          if (resp) {\r\n            let { user } = resp;\r\n            if (!user.emailVerified) {\r\n              await user.sendEmailVerification();\r\n            }\r\n            const { idToken } = resp.credential;\r\n            const { additionalUserInfo } = resp;\r\n            if (additionalUserInfo.isNewUser) {\r\n              const sanitizeUser = this.sanitizeUser(user);\r\n              const userToSave = {\r\n                ...sanitizeUser,\r\n                createdAt: new Date(),\r\n              };\r\n              await this.saveData({\r\n                collection: \"users\",\r\n                data: userToSave,\r\n                id: user.uid,\r\n              });\r\n            }\r\n            user = await this.fillUserData(this.sanitizeUser(user));\r\n            resolve({ user, idToken });\r\n          } else {\r\n            reject(new Error(\"Sorry, something went wrong. Please try later\"));\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          const { code } = error;\r\n          let message = \"Sorry, something went wrong. Please try later\";\r\n          if (code) {\r\n            message = get(firebaseErrors, code);\r\n          }\r\n          reject(new Error(message));\r\n        });\r\n    });\r\n  };\r\n\r\n  doSignOut = () => {\r\n    this.auth.signOut();\r\n  };\r\n\r\n  \r\n}\r\n\r\nexport { Firebase, auth, firestore };\r\n"]},"metadata":{},"sourceType":"module"}